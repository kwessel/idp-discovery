<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Note we define a default initialization method at this level just so we don't have to define it
    on almost every single bean.
-->
<beans default-init-method="initialize" 
       xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
    
    <!-- Define files/URLs we'll use in this config -->
    <bean id="incommonMdFile" class="java.lang.String">
        <constructor-arg value="/etc/metadata/incommon-metadata.xml" />
    </bean>
    <bean id="incommonCertFile" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="/etc/certs/inc-md-cert.pem"/>
    </bean>
    <bean id="itrustMdUrl" class="java.lang.String">
        <constructor-arg value="https://discovery.itrust.illinois.edu/itrust-metadata/itrust-metadata.xml" />
    </bean>
    <bean id="itrustMdBackingFile" class="java.lang.String">
        <constructor-arg value="/etc/metadata/itrust-metadata.xml" />
    </bean>
    <bean id="itrustCertFile" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="/etc/certs/itrust.pem"/>
    </bean>
    <!--
    <bean id="itrustTestMetadata" class="java.io.File">
        <constructor-arg value="/services/i-discover/public_html/https/itrust-metadata/itrust-metadata.xml"/>
    </bean>
    -->
    <bean id="itrustTestMdUrl" class="java.lang.String">
        <constructor-arg value="https://discovery-test.itrust.illinois.edu/itrust-metadata/itrust-metadata.xml" />
    </bean>
    <bean id="itrustTestMdBackingFile" class="java.lang.String">
        <constructor-arg value="/etc/metadata/itrust-test-metadata.xml" />
    </bean>
    <bean id="itrustTestCertFile" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="/etc/certs/itrust-test.pem"/>
    </bean>
    <bean id="localMetadataDirectory" class="java.io.File">
        <constructor-arg value="/etc/metadata/trusted-sp-metadata.xml"/>
    </bean>
    <bean id="allEntitiesOutputFile" class="java.io.File">
        <constructor-arg value="/opt/generated-metadata/all-entities.xml" />
    </bean>
    
    <!--
        Spring resource class parent shorthand beans.
    -->
    <bean id="ClassPathResource" abstract="true"
        class="org.springframework.core.io.ClassPathResource"/>
    <bean id="FileSystemResource" abstract="true"
        class="org.springframework.core.io.FileSystemResource"/>

    <!--
        schemaResources
        
        A list of all schema documents that we make common use of in SAML metadata.
        
        The schemas are organised such that each schema appears before any of the schemas importing it,
        so that the parser is not required to explicitly resolve any imports.
    -->
    <util:list id="schemaResources">
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/incommon-metadata.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/xml.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/xmldsig-core-schema.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd -->
            <constructor-arg value="/opt/schema-files/xenc-schema.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd, xenc-schema.xsd -->
            <constructor-arg value="/opt/schema-files/saml-schema-assertion-2.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd, xenc-schema.xsd, saml-schema-assertion-2.0.xsd, xml.xsd -->
            <constructor-arg value="/opt/schema-files/saml-schema-metadata-2.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/ws-addr.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports ws-addr.xsd -->
            <constructor-arg value="/opt/schema-files/ws-securitypolicy-1.2.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/MetadataExchange.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <constructor-arg value="/opt/schema-files/oasis-200401-wss-wssecurity-utility-1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports oasis-200401-wss-wssecurity-utility-1.0.xsd, xml.xsd, xmldsig-core-schema.xsd -->
            <constructor-arg value="/opt/schema-files/oasis-200401-wss-wssecurity-secext-1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports saml-schema-metadata-2.0.xsd, xml.xsd -->
            <constructor-arg value="/opt/schema-files/saml-metadata-rpi-v1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd -->
            <constructor-arg value="/opt/schema-files/shibboleth-metadata-1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports saml-schema-assertion-2.0.xsd -->
            <constructor-arg value="/opt/schema-files/sstc-metadata-attr.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports saml-schema-metadata-2.0.xsd -->
            <constructor-arg value="/opt/schema-files/sstc-request-initiation.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/sstc-saml-holder-of-key-browser-sso.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports saml-schema-metadata-2.0.xsd -->
            <constructor-arg value="/opt/schema-files/sstc-saml-idp-discovery.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/sstc-saml-metadata-algsupport-v1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports saml-schema-metadata-2.0.xsd, xml.xsd -->
            <constructor-arg value="/opt/schema-files/sstc-saml-metadata-ui-v1.0.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/uk-fed-label.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- no imports -->
            <constructor-arg value="/opt/schema-files/uk-wayf.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xenc-schema.xsd -->
            <constructor-arg value="/opt/schema-files/ws-authorization.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!--
                Imports oasis-200401-wss-wssecurity-secext-1.0.xsd, oasis-200401-wss-wssecurity-utility-1.0.xsd,
                ws-addr.xsd, MetadataExchange.xsd, saml-schema-metadata-2.0.xsd, ws-securitypolicy-1.2.xsd,
                ws-authorization.xsd.
            -->
            <constructor-arg value="/opt/schema-files/ws-federation.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd, xenc-schema.xsd -->
            <constructor-arg value="/opt/schema-files/xenc-schema-11.xsd"/>
        </bean>
        <bean parent="FileSystemResource">
            <!-- imports xmldsig-core-schema.xsd -->
            <constructor-arg value="/opt/schema-files/xmldsig11-schema.xsd"/>
        </bean>
    </util:list>
    
    <!-- Define some beans we'll use throughout this config -->
    <bean id="parserPool" class="net.shibboleth.utilities.java.support.xml.BasicParserPool" />
    
    <bean id="httpClientBuilder" class="net.shibboleth.utilities.java.support.httpclient.HttpClientBuilder" />
    <bean id="httpClient" factory-bean="httpClientBuilder" factory-method="buildClient" />
    
    <bean id="domSerializer" class="net.shibboleth.metadata.dom.DOMElementSerializer" />
    
    <util:list id="errorStatusClass">
        <value>#{T(net.shibboleth.metadata.ErrorStatus)}</value>
    </util:list>
    
    <bean id="logItemErrors" class="net.shibboleth.metadata.pipeline.StatusMetadataLoggingStage"
          p:id="logItemErrors" p:selectionRequirements-ref="errorStatusClass"/>
    
    <bean id="removeErrorItems" class="net.shibboleth.metadata.pipeline.ItemMetadataFilterStage"
          p:id="removeErrorItems" p:selectionRequirements-ref="errorStatusClass" />
    
    <!-- 
        Define a composite stage that is going to be used to check validUntil, disassemble the 
        EntitiesDescriptor, and schema validate each EntityDescriptor. 
    -->
    <bean id="termineOnInvalidSignature" class="net.shibboleth.metadata.pipeline.ItemMetadataTerminationStage"
        p:id="termineOnInvalidSignature" p:selectionRequirements-ref="errorStatusClass" />
    
    <bean id="validateValidUntil" class="net.shibboleth.metadata.dom.saml.ValidateValidUntilStage" 
        p:id="validateValidUntil"/>
    
    <bean id="disassembleEntitiesDescriptor" class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorDisassemblerStage" 
        p:id="disassembleEntitiesDescriptor"/>
    
    <bean id="validateSchema" class="net.shibboleth.metadata.dom.XMLSchemaValidationStage"
        p:id="validateSchema">
        <property name="schemaResources" ref="schemaResources"/>
    </bean>
    
    <bean id="commonProcessing" class="net.shibboleth.metadata.pipeline.CompositeStage"
        p:id="commonProcessing">
        <property name="composedStages">
            <util:list>
                <ref bean="logItemErrors" />
                <ref bean="termineOnInvalidSignature" />
                <ref bean="validateValidUntil" />
                <ref bean="disassembleEntitiesDescriptor" />
                <ref bean="validateSchema" />
            </util:list>
        </property>
    </bean>

    <!-- Stage to remove IdPs from an aggregate -->
    <bean id="removeIdps" class="net.shibboleth.metadata.dom.saml.EntityRoleFilterStage" p:id="removeIdps" p:whitelistingRoles="true">
        <property name="designatedRoles">
            <list>
                <bean class="javax.xml.namespace.QName">
                    <constructor-arg value="urn:oasis:names:tc:SAML:2.0:metadata"/>
                    <constructor-arg value="SPSSODescriptor"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- Define the pipeline for reading in and performing initial processing on InCommon metadata -->
    <bean id="readIncommonMetadata" class="net.shibboleth.metadata.dom.DOMFilesystemSourceStage"
        p:id="readIncommonMetadata" p:parserPool-ref="parserPool" p:source-ref="incommonMdFile"/>
    
    <bean id="validateIncommonSignature" class="net.shibboleth.metadata.dom.XMLSignatureValidationStage"
        p:id="validateIncommonSignature">
        <property name="verificationCertificate">
            <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean" 
                  p:resource-ref="incommonCertFile" />
        </property>
    </bean>
    
    <bean id="whitelistIncommonSps" class="net.shibboleth.metadata.dom.saml.EntityFilterStage" p:id="whitelistIncommonSps" p:whitelistingEntities="true">
        <property name="designatedEntities">
            <list>
                <value>https://answers.uillinois.edu/shibboleth</value>
            </list>
        </property>
    </bean>

    <bean id="incommonInput" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="incommonInput">
        <property name="stages">
            <util:list>
                <ref bean="readIncommonMetadata"/>
                <ref bean="validateIncommonSignature" />
                <ref bean="commonProcessing" />
                <ref bean="whitelistIncommonSps" />
            </util:list>
        </property>
    </bean>
    
    <!-- Define the pipeline for reading in and performing initial processing on I-Trust prod metadata -->
    <bean id="readItrustMetadata" class="net.shibboleth.metadata.dom.DOMResourceSourceStage"
        p:id="readItrustMetadata" p:parserPool-ref="parserPool">
        <property name="DOMResource">
            <bean class="net.shibboleth.ext.spring.resource.FileBackedHTTPResource" >
                <constructor-arg ref="itrustMdBackingFile" />
                <constructor-arg ref="httpClient" />
                <constructor-arg ref="itrustMdUrl" />
            </bean>
        </property>
    </bean>
    
    <bean id="validateItrustSignature" class="net.shibboleth.metadata.dom.XMLSignatureValidationStage"
        p:id="validateUkSignature">
        <property name="verificationCertificate">
            <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean" 
                  p:resource-ref="itrustCertFile" />
        </property>
    </bean>
    
    <bean id="itrustInput" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="itrustInput">
        <property name="stages">
            <util:list>
                <ref bean="readItrustMetadata"/>
                <ref bean="validateItrustSignature" />
                <ref bean="commonProcessing" />
            </util:list>
        </property>
    </bean>
    
    <!-- Define the pipeline for reading in I-Trust test metadata and performing initial processing on it-->
    <!--
    <bean id="readItrustTestMetadata" class="net.shibboleth.metadata.dom.DOMFilesystemSourceStage"
        p:id="readItrustTestMetadata" p:parserPool-ref="parserPool" p:source-ref="itrustTestMetadata"/>

    <bean id="itrustTestInput" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="itrustTestInput">
        <property name="stages">
            <util:list>
                <ref bean="readItrustTestMetadata" />
                <ref bean="commonProcessing" />
            </util:list>
        </property>
    </bean>
    -->
    
    <bean id="readItrustTestMetadata" class="net.shibboleth.metadata.dom.DOMResourceSourceStage"
        p:id="readItrustTestMetadata" p:parserPool-ref="parserPool">
        <property name="DOMResource">
            <bean class="net.shibboleth.ext.spring.resource.FileBackedHTTPResource" >
                <constructor-arg ref="itrustTestMdBackingFile" />
                <constructor-arg ref="httpClient" />
                <constructor-arg ref="itrustTestMdUrl" />
            </bean>
        </property>
    </bean>
    
    <bean id="validateItrustTestSignature" class="net.shibboleth.metadata.dom.XMLSignatureValidationStage"
        p:id="validateUkSignature">
        <property name="verificationCertificate">
            <bean class="net.shibboleth.ext.spring.factory.X509CertificateFactoryBean" 
                  p:resource-ref="itrustTestCertFile" />
        </property>
    </bean>
    
    <bean id="itrustTestInput" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="itrustTestInput">
        <property name="stages">
            <util:list>
                <ref bean="readItrustTestMetadata"/>
                <ref bean="validateItrustTestSignature" />
                <ref bean="commonProcessing" />
                <ref bean="removeIdps" />
            </util:list>
        </property>
    </bean>
    
    <!-- Define the pipeline for reading in local metadata and performing initial processing on it-->
    <bean id="readLocalMetadata" class="net.shibboleth.metadata.dom.DOMFilesystemSourceStage"
        p:id="readLocalMetadata" p:parserPool-ref="parserPool" p:source-ref="localMetadataDirectory"/>

    <bean id="localInput" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="localInput">
        <property name="stages">
            <util:list>
                <ref bean="readLocalMetadata" />
                <ref bean="commonProcessing" />
            </util:list>
        </property>
    </bean>
    
    <!-- 
        Pipeline that will produce an EntitiesDescriptor containing all entities, add a valid until
        restriction to it, sign it, and write it out to a file.
    -->
    <bean id="buildEntitiesDecriptor" class="net.shibboleth.metadata.dom.saml.EntitiesDescriptorAssemblerStage"
        p:id="buildEntitiesDecriptor"/>
    
    <bean id="addValidUntil" class="net.shibboleth.metadata.dom.saml.SetValidUntilStage"
        p:id="addValidUntil" p:validityDuration="#{1000L * 60 * 60 * 24 * 28}" />
    
    <bean id="generateContentReferenceId" class="net.shibboleth.metadata.dom.saml.GenerateIdStage">
        <property name="id" value="generateContentReferenceId" />
    </bean>
    
    <bean id="serializeAll" class="net.shibboleth.metadata.pipeline.SerializationStage"
        p:id="serializeAll" p:outputFile-ref="allEntitiesOutputFile" p:serializer-ref="domSerializer" />
    
    <bean id="outputAll" class="net.shibboleth.metadata.pipeline.SimplePipeline"
        p:id="outputAll" >
        <property name="stages">
            <util:list>
                <ref bean="buildEntitiesDecriptor" />
                <ref bean="addValidUntil" />
                <ref bean="generateContentReferenceId" />
                <!-- <ref bean="signEntitiesDescriptor" /> -->
                <ref bean="serializeAll" />
            </util:list>
        </property>
    </bean>
    
    <!-- 
        Main pipeline that merges all our sources together, logs and removes any items with errors,
        then outputs three files: one containing everything, one containing only IdPs, and one
        containing only SPs.  Each file has a validUntil restriction placed on it and is signed.
    -->
    <bean id="mergeInputs" class="net.shibboleth.metadata.pipeline.PipelineMergeStage"
        p:id="mergeInputs">
        <property name="mergedPipelines">
            <util:list>
                <ref bean="incommonInput" />
                <ref bean="itrustInput" />
                <ref bean="itrustTestInput" />
                <ref bean="localInput" />
            </util:list>
        </property>
    </bean>

    <!-- 
        A predicate for matching everything.
    -->
    <bean id="matchEverything" class="com.google.common.base.Predicates" factory-method="alwaysTrue"/>
    
    <bean id="generateOutputs" class="net.shibboleth.metadata.pipeline.PipelineDemultiplexerStage"
        p:id="generateOutputs" p:waitingForPipelines ="true">
        <property name="pipelineAndSelectionStrategies">
            <util:list>
                <bean class="net.shibboleth.utilities.java.support.collection.Pair">
                    <constructor-arg ref="outputAll" />
                    <constructor-arg ref="matchEverything" />
                </bean>
            </util:list>
        </property>
    </bean>
    
    <bean id="main" class="net.shibboleth.metadata.pipeline.SimplePipeline" 
        p:id="main">
        <property name="stages">
            <util:list>
                <ref bean="mergeInputs" />
                <ref bean="logItemErrors" />
                <ref bean="removeErrorItems"/>
                <ref bean="generateOutputs" />
            </util:list>
        </property>
    </bean>
    
</beans>
